const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");
const crypto = require("crypto");

module.exports.config = {
  name: "autodownfacebook",
  version: "1.1.0",
  hasPermssion: 0,
  credits: "D∆∞∆°ng Tr√¢n dev",
  description: "T·ª± ƒë·ªông t·∫£i video t·ª´ Facebook (c·∫£ video th∆∞·ªùng v√† reels) khi ph√°t hi·ªán link",
  commandCategory: "Ti·ªán √≠ch",
  usages: "",
  cooldowns: 5,
  dependencies: {
    "axios": "",
    "fs-extra": ""
  }
};

// H√†m t·∫°o ID ng·∫´u nhi√™n cho t√™n file
function generateRandomId() {
  return crypto.randomBytes(8).toString("hex");
}

// Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng API Facebook Downloader
async function downloadWithFBDown(url, outputPath) {
  try {
    console.log("ƒêang t·∫£i video v·ªõi FB Downloader API");
    
    // G·ªçi API l·∫•y link t·∫£i
    const response = await axios.get(`https://facebook-video-downloader-download-facebook-videos.p.rapidapi.com/app/main.php?url=${encodeURIComponent(url)}`, {
      headers: {
        'X-RapidAPI-Key': '2a54a31822msh37f2b82797f1c6dp1c1960jsn54bb50dd41e4',
        'X-RapidAPI-Host': 'facebook-video-downloader-download-facebook-videos.p.rapidapi.com'
      }
    });
    
    if (!response.data || !response.data.links || response.data.links.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y link t·∫£i t·ª´ API");
    }
    
    // L·∫•y link t·∫£i ch·∫•t l∆∞·ª£ng cao nh·∫•t
    const downloadLink = response.data.links[0].url;
    
    // T·∫£i video t·ª´ link
    const videoResponse = await axios({
      method: 'get',
      url: downloadLink,
      responseType: 'arraybuffer',
      timeout: 60000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
      }
    });
    
    fs.writeFileSync(outputPath, Buffer.from(videoResponse.data));
    console.log("T·∫£i video ho√†n t·∫•t qua FB Downloader API");
    
    return {
      success: true,
      title: response.data.title || "Video Facebook"
    };
  } catch (error) {
    console.error("L·ªói FB Downloader API:", error.message);
    throw error;
  }
}

// Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng API thay th·∫ø
async function downloadWithAlternativeAPI(url, outputPath) {
  try {
    console.log("ƒêang t·∫£i video v·ªõi API thay th·∫ø");
    
    // G·ªçi API l·∫•y link t·∫£i
    const response = await axios.get(`https://facebook-reel-and-video-downloader.p.rapidapi.com/app/main.php?url=${encodeURIComponent(url)}`, {
      headers: {
        'X-RapidAPI-Key': '2a54a31822msh37f2b82797f1c6dp1c1960jsn54bb50dd41e4',
        'X-RapidAPI-Host': 'facebook-reel-and-video-downloader.p.rapidapi.com'
      }
    });
    
    if (!response.data || !response.data.links || response.data.links.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y link t·∫£i t·ª´ API thay th·∫ø");
    }
    
    // L·∫•y link t·∫£i ch·∫•t l∆∞·ª£ng cao nh·∫•t
    const downloadLink = response.data.links[0].url;
    
    // T·∫£i video t·ª´ link
    const videoResponse = await axios({
      method: 'get',
      url: downloadLink,
      responseType: 'arraybuffer',
      timeout: 60000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
      }
    });
    
    fs.writeFileSync(outputPath, Buffer.from(videoResponse.data));
    console.log("T·∫£i video ho√†n t·∫•t qua API thay th·∫ø");
    
    return {
      success: true,
      title: response.data.title || "Video Facebook"
    };
  } catch (error) {
    console.error("L·ªói API thay th·∫ø:", error.message);
    throw error;
  }
}

// Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng API FDOWN
async function downloadWithFDOWN(url, outputPath) {
  try {
    console.log("ƒêang t·∫£i video v·ªõi FDOWN API");
    
    // G·ªçi API l·∫•y link t·∫£i
    const response = await axios.get(`https://fdown.net/download.php?url=${encodeURIComponent(url)}`, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
      }
    });
    
    // T√¨m link t·∫£i t·ª´ ph·∫£n h·ªìi HTML
    const htmlContent = response.data;
    const downloadLinkMatch = htmlContent.match(/href="(https:\/\/[^"]+\/download\/[^"]+)"/);
    
    if (!downloadLinkMatch || !downloadLinkMatch[1]) {
      throw new Error("Kh√¥ng t√¨m th·∫•y link t·∫£i t·ª´ FDOWN");
    }
    
    const downloadLink = downloadLinkMatch[1];
    
    // T·∫£i video t·ª´ link
    const videoResponse = await axios({
      method: 'get',
      url: downloadLink,
      responseType: 'arraybuffer',
      timeout: 60000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
      }
    });
    
    fs.writeFileSync(outputPath, Buffer.from(videoResponse.data));
    console.log("T·∫£i video ho√†n t·∫•t qua FDOWN API");
    
    return {
      success: true,
      title: "Video Facebook"
    };
  } catch (error) {
    console.error("L·ªói FDOWN API:", error.message);
    throw error;
  }
}

// H√†m t·ªïng h·ª£p t·∫£i video Facebook s·ª≠ d·ª•ng nhi·ªÅu ph∆∞∆°ng ph√°p d·ª± ph√≤ng
async function downloadFacebookVideo(videoUrl, outputPath) {
  let lastError = null;
  
  // Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng FB Downloader API
  try {
    return await downloadWithFBDown(videoUrl, outputPath);
  } catch (error) {
    console.log("Ph∆∞∆°ng ph√°p 1 th·∫•t b·∫°i, ƒëang th·ª≠ ph∆∞∆°ng ph√°p 2...");
    lastError = error;
  }
  
  // Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng API thay th·∫ø
  try {
    return await downloadWithAlternativeAPI(videoUrl, outputPath);
  } catch (error) {
    console.log("Ph∆∞∆°ng ph√°p 2 th·∫•t b·∫°i, ƒëang th·ª≠ ph∆∞∆°ng ph√°p 3...");
    lastError = error;
  }
  
  // Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng FDOWN API
  try {
    return await downloadWithFDOWN(videoUrl, outputPath);
  } catch (error) {
    console.log("Ph∆∞∆°ng ph√°p 3 th·∫•t b·∫°i");
    lastError = error;
  }
  
  // N·∫øu t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i, n√©m l·ªói cu·ªëi c√πng
  throw lastError || new Error("Kh√¥ng th·ªÉ t·∫£i video Facebook");
}

module.exports.handleEvent = async function({ api, event }) {
  const { threadID, messageID, body } = event;
  
  // Regex ƒë∆∞·ª£c c·∫£i ti·∫øn ƒë·ªÉ b·∫Øt t·∫•t c·∫£ c√°c lo·∫°i link Facebook (video th∆∞·ªùng v√† reels)
  // Th√™m group capture ƒë·ªÉ d·ªÖ d√†ng debug
  const fbRegex = /(?:https?:\/\/)?(?:www\.|web\.|m\.)?(?:facebook\.com|fb\.watch|fb\.com)\/(?:(?:watch\/?\?v=|reel\/|share\/v\/|watch\/|story\.php\?story_fbid=|[^\/]+\/videos\/|video\.php\?v=|[^\/]+\/reels\/|reels\/|watch\?v=)([^\s&\/\?]+))/i;
  
  console.log(`Ki·ªÉm tra tin nh·∫Øn: ${body}`);
  
  if (fbRegex.test(body)) {
    console.log("Ph√°t hi·ªán link Facebook");
    const matches = body.match(fbRegex);
    const fbLink = matches[0];
    const videoId = matches[1];
    
    console.log(`Link ƒë√£ ph√°t hi·ªán: ${fbLink}`);
    console.log(`Video ID: ${videoId}`);
    
    try {
      api.sendMessage(`‚è≥ ƒêang t·∫£i video Facebook, vui l√≤ng ƒë·ª£i (c√≥ th·ªÉ m·∫•t ƒë·∫øn 1-2 ph√∫t)...`, threadID, messageID);
      
      // T·∫°o ƒë∆∞·ªùng d·∫´n l∆∞u video v·ªõi ID ng·∫´u nhi√™n ƒë·ªÉ tr√°nh xung ƒë·ªôt
      const randomId = generateRandomId();
      const filePath = path.join(__dirname, "..", "..", "..", "cache", `fb-${randomId}.mp4`);
      
      console.log(`B·∫Øt ƒë·∫ßu t·∫£i video t·ª´ link: ${fbLink}`);
      console.log(`File s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: ${filePath}`);
      
      // T·∫£i video
      const result = await downloadFacebookVideo(fbLink, filePath);
      
      console.log("T·∫£i video th√†nh c√¥ng");
      
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file tr∆∞·ªõc khi g·ª≠i
      const fileStats = fs.statSync(filePath);
      const fileSizeMB = fileStats.size / (1024 * 1024);
      
      console.log(`K√≠ch th∆∞·ªõc file: ${fileSizeMB.toFixed(2)}MB`);
      
      if (fileSizeMB > 25) {
        fs.unlinkSync(filePath);
        return api.sendMessage(`‚ùé Video c√≥ k√≠ch th∆∞·ªõc qu√° l·ªõn (${fileSizeMB.toFixed(2)}MB) ƒë·ªÉ g·ª≠i. Gi·ªõi h·∫°n l√† 25MB.`, threadID, messageID);
      }
      
      // G·ª≠i video
      console.log("ƒêang g·ª≠i video v√†o nh√≥m...");
      api.sendMessage({
        body: `üé¨ Video t·ª´ Facebook ${result.title ? `\nTi√™u ƒë·ªÅ: ${result.title}` : ""}`,
        attachment: fs.createReadStream(filePath)
      }, threadID, () => {
        console.log("ƒê√£ g·ª≠i video th√†nh c√¥ng v√† x√≥a file t·∫°m");
        fs.unlinkSync(filePath);
      }, messageID);
      
    } catch (err) {
      console.error("L·ªói t·∫£i video:", err);
      return api.sendMessage(`‚ùé ƒê√£ x·∫£y ra l·ªói khi t·∫£i video Facebook: ${err.message}. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c th·ª≠ video kh√°c.`, threadID, messageID);
    }
  } else {
    // Debug: Ki·ªÉm tra t·∫°i sao regex kh√¥ng kh·ªõp
    if (body.includes("facebook.com/reel/") || body.includes("fb.watch")) {
      console.log("Ph√°t hi·ªán link facebook nh∆∞ng regex kh√¥ng kh·ªõp");
      console.log(`Link g·ªëc: ${body}`);
      console.log(`K·∫øt qu·∫£ test regex: ${fbRegex.test(body)}`);
    }
  }
};

module.exports.run = function({ api, event }) {
  // Kh√¥ng c·∫ßn x·ª≠ l√Ω v√¨ ƒë√¢y l√† l·ªánh noprefix
}; 
