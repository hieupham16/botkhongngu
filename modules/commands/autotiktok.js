const axios = require("axios");
const fs = require("fs-extra");
const request = require("request");

module.exports.config = {
  name: "autodowntiktok",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "LunarKrystal",
  description: "T·ª± ƒë·ªông t·∫£i video t·ª´ TikTok khi ph√°t hi·ªán link",
  commandCategory: "Ti·ªán √≠ch",
  usages: "",
  cooldowns: 5,
  dependencies: {
    "axios": "",
    "fs-extra": "",
    "request": ""
  }
};

module.exports.handleEvent = async function({ api, event }) {
  const { threadID, messageID, body } = event;
  
  // Regex ƒë·ªÉ t√¨m c√°c link TikTok ph·ªï bi·∫øn
  const tiktokRegex = /(tiktok.com|douyin.com|vm.tiktok.com|vt.tiktok.com|www.tiktok.com)\/([@a-zA-Z0-9_-]+\/)?([a-zA-Z0-9_-]+)/;
  
  // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a link TikTok
  if (tiktokRegex.test(body)) {
    const link = body.match(tiktokRegex)[0];
    try {
      api.sendMessage("‚è≥ ƒêang t·∫£i video TikTok...", threadID, messageID);
      
      // S·ª≠ d·ª•ng API TikWM ƒë·ªÉ t·∫£i video kh√¥ng watermark
      const res = await axios.get(`https://www.tikwm.com/api/?url=${link}`);
      
      if (res.data.code !== 0) {
        return api.sendMessage("‚ùé Kh√¥ng th·ªÉ t·∫£i video TikTok n√†y.", threadID);
      }
      
      const { play, author, music, digg_count, comment_count, play_count, share_count, download_count, title, duration, region } = res.data.data;
      
      // T·∫£i video
      const videoPath = __dirname + "/cache/tiktok_autodown.mp4";
      
      const callback = () => {
        api.sendMessage({
          body: `[ TIKTOK VIDEO ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüó∫Ô∏è Qu·ªëc gia: ${region}\nüìù Ti√™u ƒë·ªÅ: ${title}\nüë§ T√™n k√™nh: ${author.nickname}\nüåæ ID ng∆∞·ªùi d√πng: ${author.unique_id}\n‚ù§Ô∏è L∆∞·ª£t tim: ${digg_count}\nüí¨ T·ªïng b√¨nh lu·∫≠n: ${comment_count}\nüîé L∆∞·ª£t xem: ${play_count}\nüîÄ L∆∞·ª£t chia s·∫ª: ${share_count}\n‚¨áÔ∏è L∆∞·ª£t t·∫£i: ${download_count}\n‚è≥ Th·ªùi gian: ${duration} gi√¢y`,
          attachment: fs.createReadStream(videoPath)
        }, threadID, () => fs.unlinkSync(videoPath), messageID);
      };
      
      request(encodeURI(play)).pipe(fs.createWriteStream(videoPath)).on('close', callback);
    } catch (err) {
      console.error(err);
      return api.sendMessage("‚ùé ƒê√£ x·∫£y ra l·ªói khi t·∫£i video TikTok.", threadID, messageID);
    }
  }
};

module.exports.run = function({ api, event }) {
  // Kh√¥ng c·∫ßn x·ª≠ l√Ω v√¨ ƒë√¢y l√† l·ªánh noprefix
}; 
